import { Recipe } from './types'; //Import recipe type
import { createRecipe } from './api'; //Import function to create recipe
import { renderRecipes } from './dom'; //Import recipe type

// Handles the recipe form submission
export function handleFormSubmit(form: HTMLFormElement) {
  form.addEventListener('submit', async (e) => {
    e.preventDefault(); // Prevent the default form submission behavior
    
    // Grab the form input elements and cast them to their appropriate HTML types
    const nameInput = document.getElementById('recipeName') as HTMLInputElement;
    const ingredientsInput = document.getElementById('recipeIngredients') as HTMLTextAreaElement;
    const instructionsInput = document.getElementById('recipeInstructions') as HTMLTextAreaElement;

    // Trim input values to remove leading/trailing whitespace
    const name = nameInput.value.trim();
    const ingredients = ingredientsInput.value.trim();
    const instructions = instructionsInput.value.trim();

    // Simple validation to ensure required fields are filled out
    if (!name || !ingredients) {
      alert('Please provide both name and ingredients.');
      return;
    }

    // Build a new recipe object (omitting the id because it's generated by the server)
    const newRecipe: Omit<Recipe, 'id'> = {
      name,
      ingredients,
      instructions,
    };
    //Submit the recipe to the API
    await createRecipe(newRecipe);

    //Clear the form fields
    nameInput.value = '';
    ingredientsInput.value = '';
    instructionsInput.value = '';

    //Re-render recipe list with new item
    await renderRecipes();
  });
}
